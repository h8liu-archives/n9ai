package tuai;

import java.io.InputStream;

public interface Game {

	/**
	 * Generate the initial piece according to the startingMode. This is not
	 * required to be a determined function; random factors is permitted. This
	 * will be invoked only once in one new game, and will not be invoked when
	 * replaying a game or restarting a game.
	 * 
	 * @param startingMode
	 *            The specified mode to start. This maybe null for a default
	 *            starting mode.
	 * @return Returns the initial piece.
	 */
	public Box generateInit(String startingMode);

	/**
	 * Set the initial piece. This will be invoked at the beginning of a game.
	 * The initial piece is generated by generateInit() for a new game, and it
	 * is a saved one when it is restarting a game or replaying.
	 * 
	 * @param box
	 *            The initial piece.
	 * @return Returns false if the initial box is invalid.
	 */
	public boolean setInit(Box box);

	/**
	 * Synchronize the round number of the game, this will invoke at the
	 * beginning of every round.
	 * 
	 * @param time
	 *            The round number of the game.
	 * @return Return false if the game is going to end, return true if the game
	 *         will continue.
	 */
	public boolean progress(int round);

	/**
	 * The share piece of current round, this will be visible to every player
	 * that is active this round. This will be called once per round.
	 * 
	 * Note that this piece will not be saved in replays, hence this should be a
	 * piece determined by the initial piece of the game and all the former
	 * reactions and reacting time of each player.
	 * 
	 * @return The share piece for all players. null represents that there is no
	 *         share piece for current round.
	 */
	public Box getShare();

	/**
	 * Get the time limit for playerId of current round. This will be called
	 * once per round per player.
	 * 
	 * Note that this integer will not be saved in replays, hence this should be
	 * a piece determined by the initial piece of the game and all the former
	 * reactions and reacting time of each player.
	 * 
	 * @param playerId
	 *            The player id.
	 * 
	 * @return The time limit for current round. 0 or negative number represents
	 *         the player is not active current round.
	 */
	public int getTimeLimit(int playerId);

	/**
	 * Get the special piece for playerId of current round. This will be called
	 * once per round per player, and will be invoked only if getTimeLimit is
	 * positive.
	 * 
	 * Note that this piece will not be saved in replays, hence this should be a
	 * piece determined by the initial piece of the game and all the former
	 * reactions and reacting time of each player.
	 * 
	 * @param playerId
	 *            The player id.
	 * @return The special piece for the specified player. null represents that
	 *         there is no special piece for this player current round.
	 */
	public Box getSpecial(int playerId);

	/**
	 * Set the player's reaction of current round.
	 * 
	 * @param playerId
	 *            The player id.
	 * @param box
	 *            The content of the players reaction, null for timeout.
	 * @param timeUsed
	 *            Time used by the player for reacting, -1 for timeout.
	 */
	public void setReaction(int playerId, Box box, int timeUsed);

	/**
	 * Get the log of the game. The log is only for debugging.
	 * 
	 * @return The logging input stream.
	 */
	public InputStream getLog();

	/**
	 * Get the winner playerId. This will be invoked after the game is over.
	 * 
	 * @return Player id of the winner. -1 for no winner.
	 */
	public int getWinner();
	
}
